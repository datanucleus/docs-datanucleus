<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>DataNucleus Source Code</title>
    </properties>

    <body>
        <section name="DataNucleus Source Code : GitHub Repositories">
            <img src="../images/GitHub-Mark-64px.png" alt="GitHub" border="0"/>
            <p>
                DataNucleus source code is hosted on <a href="https://github.com/datanucleus">GitHub</a> and uses
                the <a href="http://git-scm.com//">Git</a> (distributed) source code version control system.
                You can check out from GitHub using
            </p>
<source>
Using SSH:
git clone git@github.com:datanucleus/{repository-name}.git

Using HTTPS:
git clone https://github.com/datanucleus/{repository-name}.git
</source>
            <p>
                Obviously, not everyone will want to check out all DataNucleus project repositories, so use this command
                for the particular repositories that you require. Note that GitHub repositories are all browsable via
                the web, for example <a href="https://github.com/datanucleus/datanucleus-neo4j">the DataNucleus Neo4j datastore plugin</a>.
                Note that all plugin repositories are <a href="http://maven.apache.org">Maven projects</a> so you need to
                understand how to build with Maven to build these plugins.
            </p>
            <p>
                DataNucleus can be easily developed using <a href="#maven">Maven</a>, <a href="#eclipse">Eclipse</a>, 
                or other IDEs (let us know if you write docs for how to develop DataNucleus with a different IDE).
                You require JDK1.6+, a Git client (to download/commit <a href="src.html">DataNucleus Git-based projects</a>) and an editor.
            </p>
            <p>
                <b>Note that (previous) source code for all versions up to and including 3.3.5 is stored in <a href="sourcecode_sf.html">SourceForge</a>.</b>
            </p>
            <br/>

            <subsection name="GitHub : Plugins">
                <p>
                    Within the DataNucleus project over on GitHub you have various repositories providing actual DataNucleus plugins.
                    These are currently
                </p>
<pre>
datanucleus-core

APIs :                                Type support :
datanucleus-api-jdo                   datanucleus-geospatial
datanucleus-api-jpa                   datanucleus-guava
datanucleus-api-rest                  datanucleus-jodatime

Datastores :                          Others :
datanucleus-excel                     datanucleus-cache
datanucleus-hbase                     datanucleus-jdo-query
datanucleus-json                      datanucleus-jdo-connector
datanucleus-ldap                      datanucleus-jpa-query
datanucleus-mongodb
datanucleus-neo4j
datanucleus-neodatis
datanucleus-odf
datanucleus-rdbms
datanucleus-xml
</pre>
                <p>
                    All plugins are independently versioned ("master" is the latest branch). This is because they have their own lifecycle, and plugins are
                    bundled together into the "products" (e.g AccessPlatform). So we could have AccessPlatform version 1.1 using version X of a plugin, and 
                    AccessPlatform version 1.2 using version Y of that plugin because it needs some new functionality.
                </p>

                <h3>Maven</h3>
                <p>
                    All DataNucleus plugins are Maven projects, with a <i>pom.xml</i>. 
                    To build and install the plugin using Maven simply type
                </p>
<source>mvn clean install</source>
                <p>
                    and the plugin is built and installed in your local Maven repository.
                    If you are developing some feature that requires updates to, for example core (<b>datanucleus-core</b>), 
                    <b>an api</b> (e.g <b>datanucleus-api-jdo</b>) and a datastore (e.g <b>datanucleus-rdbms</b>) then you will need
                    to build these in the same order, core first, then the API, then the datastore.
                </p>
                <br/>
                <br/>

                <h3>Eclipse</h3>
                <p>
                    When building/developing using Eclipse the first thing you need to do is install the Eclipse "m2e" plugin (if not already done).
                    This means that the build of any plugin will build using Maven (and get its dependencies from Maven).
                    You then need to import all DataNucleus projects you are working on. Since each plugin in Eclipse will build using Maven
                    you don't need to have all dependent projects present too, just the ones you're working on. 
                </p>
                
                <br/>
            </subsection>

            <a name="tests"/>
            <subsection name="GitHub : Tests">
                <p>
                    In order to test DataNucleus capabilities we have many end-to-end tests. In the GitHub DataNucleus project these are available
                    in the repository <a href="https://github.com/datanucleus/tests">tests</a>. Below that you have some framework projects that need building first, 
                    then there are tests split by the persistence API they are for (JDO, JPA, REST, etc).
                </p>
                <br/>
            </subsection>

            <a name="tools"/>
            <subsection name="GitHub : Tools">
                <p>
                    The GitHub DataNucleus project also provides some tools to help in using DataNucleus. The repositories providing tools are
                </p>
<pre><![CDATA[
datanucleus-maven-plugin
datanucleus-eclipse-plugin
datanucleus-idea-plugin
]]></pre>
                <p>
                    Like with all plugins, the tools are independently versioned since they have their own lifecycle.
                </p>
                <br/>
            </subsection>

            <a name="documentation"/>
            <subsection name="GitHub : Documentation">
                <p>
                    The GitHub DataNucleus project also provides the documentation for DataNucleus.
                </p>
                <h3>datanucleus.org Project Site</h3>
                <p>
                    DataNucleus has a main site <b>datanucleus.org</b> for the overall project and the commercial
                    services that we offer. This site makes use of a "skin" responsible for adding header/footer
                    to all docs as well as the dropdown menus.
                    This "skin" is available in GitHub at <a href="https://github.com/datanucleus/docs-datanucleus-skin">docs-datanucleus-skin</a>.
                    Now you need to build/install the skin, by typing <i>mvn clean install</i>.
                </p>
                <p>
                    The documentation is in GitHub at <a href="https://github.com/datanucleus/docs-datanucleus">docs-datanucleus</a>
                    Now you can build the site itself by typing <i>mvn clean site</i>.
                    The site is then available under <i>target/site</i>.
                    The documentation is also generated every night from what is in GitHub, and this appears on the 
                    website.
                </p>
                <br/>
                <br/>
                <h3>AccessPlatform Product Site</h3>
                <p>
                    The documentation for AccessPlatform uses the same Maven process, and also has its own "skin".
                    This "skin" is available in GitHub at <a href="https://github.com/datanucleus/docs-accessplatform-skin">docs-accessplatform-skin</a>.
                    Now you need to build/install the skin, by typing <i>mvn clean install</i>.
                </p>
                <p>
                    The documentation is in GitHub at <a href="https://github.com/datanucleus/docs-accessplatform">docs-accessplatform</a>
                    Now you can build the site itself by typing <i>mvn clean site</i> and this is generated under <i>target/site</i>.
                    You can also build a PDF of the docs by typing <i>mvn clean pdf:pdf</i>, and this is generated under <i>target/pdf</i>.
                    The documentation is also generated every night from what is in GitHub, and this appears on the  website.
                </p>
            </subsection>
        </section>
    </body>
</document>