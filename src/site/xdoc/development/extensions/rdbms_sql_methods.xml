<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>PluginPoints : RDBMS SQL Methods</title>
    </properties>

    <body>
        <section name="PluginPoints : RDBMS SQL Methods Support">
            <img src="../../images/nucleus_plugin.gif" border="0" alt=""/>
            <p>
                DataNucleus is developed as a plugin-driven framework and one of the components that is 
                pluggable is the support for JDOQL/JPQL methods in the "new" query mechanism. 
                DataNucleus provides support for the majority of SQL methods that you are ever likely
                to need but is structured so that you could add on support for your own easily enough
            </p>
            <p>
                The following sections describe how to create your own SQL Method plugin for DataNucleus.
            </p>
            <subsection name="Interface">
                <p>
                    Any SQL Method plugin will need to implement 
                    <i>org.datanucleus.store.rdbms.sql.method.SQLMethod</i>
                    <a href="http://www.datanucleus.org/javadocs/store.rdbms/latest/org/datanucleus/store/rdbms/sql/method/SQLMethod.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    So you need to implement the following interface
                </p>
                <source>
import org.datanucleus.store.rdbms.sql.method;

public interface SQLMethod
{
    /**
     * Return the expression for this SQL function.
     * @param expr The expression that it is invoked on
     * @param args Arguments passed in
     * @return The SQL expression using the SQL function
     */
    public SQLExpression getExpression(SQLExpression expr, List args);
}</source>
                <br/>
            </subsection>

            <subsection name="Implementation">
                <p>
                    So there is only one method to provide in your implementation. The arguments to this
                    are
                </p>
                <ul>
                    <li>The expression on which the method is invoked. So if you have 
                        <i>{string}.myMethod(args)</i> then the first argument will be a
                        <i>StringExpression</i>. If the method is a static function then this argument is null</li>
                    <li>The args are the arguments passed in to the method call. They will be SQLExpression/SQLLiteral.</li>
                </ul>
                <p>
                    So if we wanted to support <i>{String}.length()</i> as an example, so we define
                    our class as
                </p>
                <source><![CDATA[
package mydomain;

import java.util.List;
import java.util.ArrayList;

import org.datanucleus.exceptions.NucleusException;
import org.datanucleus.store.rdbms.sql.expression.NumericExpression;
import org.datanucleus.store.rdbms.sql.expression.SQLExpression;
import org.datanucleus.store.rdbms.sql.expression.StringExpression;

public class MyStringLengthMethod extends AbstractSQLMethod
{
    public SQLExpression getExpression(SQLExpression expr, List args)
    {
        if (expr instanceof StringExpression)
        {
            ArrayList funcArgs = new ArrayList();
            funcArgs.add(expr);
            return new NumericExpression("CHAR_LENGTH", funcArgs);
        }
        else
        {
            throw new NucleusException(LOCALISER.msg("060001", "length", expr));
        }
    }
}]]></source>
                <p>
                    So in this implementation when the user includes <i>{string}.length()</i>
                    this is translated into the SQL <b>CHAR_LENGTH({string})</b> which will certainly
                    work on some RDBMS. Obviously you could use this extension mechanism to support a
                    different underlying SQL function.
                </p>
                <br/>
            </subsection>

            <subsection name="Plugin Specification">
                <p>
                    So we now have our custom SQL method and we just need to make this into a DataNucleus 
                    plugin. To do this you simply add a file <i>plugin.xml</i> to your JAR at the root. 
                    The file <i>plugin.xml</i> should look like this
                </p>
                <source><![CDATA[
<?xml version="1.0"?>
<plugin id="mydomain" name="DataNucleus plug-ins" provider-name="My Company">
    <extension point="org.datanucleus.store.rdbms.sql_method">
        <sql-method class="java.lang.String" method="length" datastore="h2"
            evaluator="mydomain.MyStringLengthMethod"/>
    </extension>
</plugin>]]></source>
                <p><i>If implementing support for a method that is static (e.g JDOHelper.getObjectId()) omit the
                    "class" argument from the plugin.xml entry, and put the method as "JDOHelper.getObjectId"</i></p>
                <p>
                    Note that you also require a MANIFEST.MF file as per the
                    <a href="index.html">PluginPoints Guide</a>.
                </p>
                <p>
                    So we defined calls to a method <i>length</i> for the type <i>java.lang.String</i>
                    for the datastore "h2" to use our evaluator. Simple! Whenever this method is encountered
                    in a query from then on for the H2 database it will use our method evaluator.
                </p>
            </subsection>
        </section>
    </body>
</document>