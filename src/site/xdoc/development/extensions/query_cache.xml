<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>PluginPoints : Query Cache</title>
    </properties>

    <body>
        <section name="PluginPoints : Query Cache">
            <img src="../../images/nucleus_plugin.gif" border="0" alt=""/>
            <p>
                DataNucleus is developed as a plugin-driven framework and one of the components that is 
                pluggable is the caching of query compilations. DataNucleus provides some inbuilt cache
                options, but also allows you to provide your own.
            </p>
            <p>
                DataNucleus is able to support third party Query Cache products. 
                You can extend DataNucleus's capabilities using the plugin extension 
                <i>org.datanucleus.cache_query</i>.
            </p>
            <table>
                <tr>
                    <th>Plugin extension-point</th>
                    <th>Key</th>
                    <th>Description</th>
                    <th width="80">Location</th>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_query</td>
                    <td>weak</td>
                    <td>Weak Query Cache (default)</td>
                    <td>datanucleus-core</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_query</td>
                    <td>soft</td>
                    <td>Soft Query Cache</td>
                    <td>datanucleus-core</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_query</td>
                    <td>strong</td>
                    <td>Strong Query Cache</td>
                    <td>datanucleus-core</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_query</td>
                    <td>javax.cache</td>
                    <td>javax.cache Query Cache</td>
                    <td>datanucleus-core</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_query</td>
                    <td>cacheonix</td>
                    <td>Cacheonix Query Cache</td>
                    <td>datanucleus-cache</td>
                </tr>
            </table>
            <p>
                The following sections describe how to create your own Query cache plugin for DataNucleus.
            </p>
            <subsection name="Interface">
                <p>
                    If you have your own Query cache you can easily use it with DataNucleus.
                    DataNucleus defines a QueryCache interface and you need to implement this.
                    <a href="http://www.datanucleus.org/javadocs/core/latest/org/datanucleus/store/query/cache/QueryCache.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                </p>
                <source>
package org.datanucleus.store.query.cache;
public interface QueryCache
{
    void close();
    void evict(String queryKey);
    void clear();
    boolean isEmpty();
    int size();
    CachedQuery get(String queryKey);
    CachedQuery put(String queryKey, CachedQuery cachedQuery);
    boolean contains(String queryKey);
}</source>
                <br/>
            </subsection>

            <subsection name="Implementation">
                <p>
                    Let's suppose your want to implement your own Level 2 cache <i>MyLevel2Cache</i>
                </p>
                <source><![CDATA[
package mydomain;

import org.datanucleus.OMFContext;
import org.datanucleus.store.query.cache.QueryCache;

public class MyQueryCache implements QueryCache
{
    /**
     * Constructor.
     * @param omfCtx OMF Context
     */
    public MyQueryCache(OMFContext omfCtx)
    {
        ...
    }

    ... (implement the interface)
}]]></source>
            </subsection>

            <subsection name="Plugin Specification">
                <p>
                    Once you have this implementation you then need to make the class available as a 
                    DataNucleus plugin. You do this by putting a file <i>plugin.xml</i> in your JAR at the 
                    root of the CLASSPATH. The file <i>plugin.xml</i> will look like this
                </p>
                <source><![CDATA[
<?xml version="1.0"?>
<plugin id="mydomain" name="DataNucleus plug-ins" provider-name="My Company">
    <extension point="org.datanucleus.cache_query">
	    <cache name="MyCache" class-name="mydomain.MyQueryCache"/>
    </extension>
</plugin>]]></source>
                <p>
                    Note that you also require a MANIFEST.MF file as per the
                    <a href="index.html">PluginPoints Guide</a>.
                </p>
            </subsection>

            <subsection name="Plugin Usage">
                <p>
                    The only thing remaining is to use your Query Cache plugin. To do this you specify the 
                    persistence property <i>datanucleus.cache.query.type</i> as <b>MyCache</b> 
                    (the "name" in <i>plugin.xml</i>).
                </p>
            </subsection>
        </section>
    </body>
</document>