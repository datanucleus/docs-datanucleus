<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>PluginPoints : Connection Factory</title>
    </properties>

    <body>
        <section name="PluginPoints : Connection Factory">
            <img src="../../images/nucleus_plugin.gif" border="0" alt=""/>
            <p>
                Any plugin for a datastore needs a way of connecting to the datastore and linking these
                connections into the persistence process. This is provided by way of a ConnectionFactory.
                This is pluggable so you can define your own and register it for the datastore, and you use the
                plugin extension <i>org.datanucleus.store_connectionfactory</i>..
                This plugin point is intended to be implemented by provider of the datastore plugin.
                Below are two samples that provide this, but you will find at least the transactional one for
                any datastore plugin.
            </p>
            <table>
                <tr>
                    <th>Plugin extension-point</th>
                    <th>Name</th>
                    <th>Datastore</th>
                    <th>Transactional</th>
                    <th width="80">Location</th>
                </tr>
                <tr>
                    <td>org.datanucleus.store_connectionfactory</td>
                    <td>rdbms/tx</td>
                    <td>rdbms</td>
                    <td>true</td>
                    <td>datanucleus-rdbms</td>
                </tr>
                <tr>
                    <td>org.datanucleus.store_connectionfactory</td>
                    <td>rdbms/nontx</td>
                    <td>rdbms</td>
                    <td>false</td>
                    <td>datanucleus-rdbms</td>
                </tr>
            </table>
            <br/>

            <subsection name="Interface">
                <p>
                    Any Connection Factory plugin will need to implement <i>org.datanucleus.store.connection.ConnectionFactory</i>.
                    <a href="http://www.datanucleus.org/javadocs/core/latest/org/datanucleus/store/connection/ConnectionFactory.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    So you need to implement the following interface
                </p>
                <source>
public interface ConnectionFactory
{
    /**
     * Obtain a connection from the Factory. 
     * The connection will be enlisted within the {@link org.datanucleus.Transaction} 
     * associated to the ObjectManager if "enlist" is set to true.
     * @param om the ObjectManager
     * @param options Any options for then creating the connection
     * @return the ManagedConnection
     */
    ManagedConnection getConnection(ObjectManager om, Map options);

    /**
     * Create the ManagedConnection.
     * Only used by ConnectionManager so do not call this.
     * @param om ObjectManager (if any)
     * @param transactionOptions the Transaction options this connection will be enlisted to, 
     *                           null if non existent
     * @return The ManagedConnection.
     */
    ManagedConnection createManagedConnection(ObjectManager om, Map transactionOptions);
}</source>
                <br/>
            </subsection>

            <subsection name="Plugin Specification">
                <p>
                    So we now have our custom "Connection Factory" and we just need to make this into a 
                    DataNucleus plugin. To do this you simply add a file <i>plugin.xml</i> to your JAR at the 
                    root. The file <i>plugin.xml</i> should look like this
                </p>
                <source><![CDATA[
<?xml version="1.0"?>
<plugin id="mydomain.connectionfactory" name="My DataNucleus plug-in" provider-name="MyCompany">
    <extension point="org.datanucleus.store_connectionfactory">
        <connectionfactory name="rdbms/tx" class-name="org.datanucleus.store.rdbms.ConnectionFactoryImpl"
            transactional="true" datastore="rdbms"/>
        <connectionfactory name="rdbms/nontx" class-name="org.datanucleus.store.rdbms.ConnectionFactoryImpl"
            transactional="false" datastore="rdbms"/>
    </extension>
</plugin>]]></source>
                <p>
                    Note that you also require a MANIFEST.MF file as per the
                    <a href="index.html">PluginPoints Guide</a>.
                </p>
                <p>
                    So now for the datastore "rdbms" we will use this implementation when transactional
                    or non-transactional
                </p>
            </subsection>

            <subsection name="Lifecycle">
                <p>
                	The <i>ConnectionFactory</i> instance(s) are created when the StoreManager is instantiated 
                    and held as hard references during the lifecycle of the StoreManager.
                </p>
            </subsection>
        </section>
    </body>
</document>