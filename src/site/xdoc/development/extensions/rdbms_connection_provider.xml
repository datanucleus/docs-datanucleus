<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>PluginPoints : Connection Provider</title>
    </properties>

    <body>
        <section name="PluginPoints : Connection Provider">
            <img src="../../images/nucleus_plugin.gif" border="0" alt=""/>
            <p>
                DataNucleus is developed as a plugin-driven framework and one of the components that is 
                pluggable is the failover mechanism. DataNucleus provides a support for basic failover algorithm, 
                and is structured so that you can easily add your own failover algorithm and have them usable within 
                your DataNucleus usage.
            </p>
            <p>
                Failover algorithm for DataNucleus can be plugged using the plugin extension 
                <i>org.datanucleus.store.rdbms.connectionprovider</i>.
            </p>
            <table>
                <tr>
                    <th>Plugin extension-point</th>
                    <th>Key</th>
                    <th>Description</th>
                    <th width="80">Location</th>
                </tr>
                <tr>
                    <td>org.datanucleus.store.rdbms.connectionprovider</td>
                    <td>PriorityList</td>
                    <td>Ordered List Algorithm</td>
                    <td>datanucleus-rdbms</td>
                </tr>
            </table>
            <br/>

            <subsection name="Interface">
                <p>
                    Any Connection Provider plugin will need to implement <i>org.datanucleus.store.rdbms.ConnectionProvider</i>.
                    <a href="http://www.datanucleus.org/javadocs/store.rdbms/latest/org/datanucleus/store/rdbms/ConnectionProvider.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    So you need to implement the following interface
                </p>
                <source>
package org.datanucleus.store.rdbms;

import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

/**
 * Connects to a DataSource to obtain a Connection.
 * The ConnectionProvider is not a caching and neither connection pooling mechanism.
 * The ConnectionProvider exists to perform failover algorithm on multiple DataSources
 * when necessary.
 * One instance per StoreManager (RDBMSManager) is created.
 * Users can provide their own implementation via the extension org.datanucleus.store_connectionprovider 
 */
public interface ConnectionProvider
{
    /**
     * Flag if an error causes the operation to thrown an exception, or false to skip to next DataSource. 
     * If an error occurs on the last DataSource on the list an Exception will be thrown no matter if 
     * failOnError is true or false. This is a hint. 
     * Implementations may ignore the user setting and force it's own behaviour
     * @param flag true if to fail on error
     */
    void setFailOnError(boolean flag);
    
    /**
     * Obtain a connection from the datasources, starting on the first
     * datasource, and if unable to obtain a connection skips to the next one on the list, and try again 
     * until the list is exhausted.
     * @param ds the array of datasources. An ordered list of datasources
     * @return the Connection, null if <code>ds</code> is null, or null if the DataSources has returned 
     *              a null as connection
     * @throws SQLException in case of error and failOnError is true or the error occurs while obtaining 
     *              a connection with the last
     * DataSource on the list
     */
    Connection getConnection(DataSource[] ds) throws SQLException;

}</source>
                <br/>
            </subsection>

            <subsection name="Plugin Specification">
                <p>
                    So we now have our custom "Connection Provider" and we just need to make this into a DataNucleus 
                    plugin. To do this you simply add a file <i>plugin.xml</i> to your JAR at the root. The file 
                    <i>plugin.xml</i> should look like this
                </p>
                <source><![CDATA[
<?xml version="1.0"?>
<plugin id="mydomain.connectionprovider" name="My DataNucleus plug-in" provider-name="MyCompany">
    <extension point="org.datanucleus.store.rdbms.connectionprovider">
       <connection-provider class-name="mydomain.MyConnectionProvider" name="MyName"/>
    </extension>
</plugin>]]></source>
                <p>
                    Note that you also require a MANIFEST.MF file as per the
                    <a href="index.html">PluginPoints Guide</a>.
                </p>
                <p>
                    So here we have our "ConnectionProvider" class "MyConnectionProvider" which is named "MyName". 
                    When constructing the PersistenceManagerFactory, add the setting 
                    <i>datanucleus.rdbms.connectionProviderName=MyName</i>.
                </p>
            </subsection>
            <subsection name="Lifecycle">
                <p>
                	The <i>ConnectionProvider</i> instance is created when the RBMSManager is instantiated and hold
                    as hard reference during the lifecycle of the RDBMSManager.
                </p>
            </subsection>
        </section>
    </body>
</document>