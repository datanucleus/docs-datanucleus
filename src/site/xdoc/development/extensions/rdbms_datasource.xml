<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>PluginPoints : Connection Pooling</title>
    </properties>

    <body>
        <section name="PluginPoints : DataSource Connection pooling">
            <img src="../../images/nucleus_plugin.gif" border="0" alt=""/>
            <p>
                DataNucleus is developed as a plugin-driven framework and one of the components that is 
                pluggable is  the pooling of connections to RDBMS datastores. DataNucleus provides a large selection
                of connection pools (DBCP, C3P0, Proxool, BoneCP) but is structured so that you can easily add your 
                own variant and have it usable within your DataNucleus usage.
            </p>
            <p><b>Note that this plugin point is now discontinued and replaced by 
                <a href="rdbms_connection_pool.html">RDBMS Connection Pooling</a></b> (from 3.2.8 of datanucleus-rdbms).</p>
            <p>
                DataNucleus requires a DataSource to define the datastore in use and consequently allows use of 
                connection pooling. DataNucleus provides plugins for different pooling products - DBCP, C3P0, BoneCP, and
                Proxool. You can easily define your own plugin for pooling. You can extend DataNucleus's capabilities 
                using the plugin extension <i>org.datanucleus.store.rdbms.datasource</i>.
            </p>
            <table>
                <tr>
                    <th>Plugin extension-point</th>
                    <th>Key</th>
                    <th>Description</th>
                    <th width="80">Location</th>
                </tr>
                <tr>
                    <td>org.datanucleus.store.rdbms.datasource</td>
                    <td>c3p0</td>
                    <td>RDBMS connection pool, using C3P0</td>
                    <td>datanucleus-rdbms</td>
                </tr>
                <tr>
                    <td>org.datanucleus.store.rdbms.datasource</td>
                    <td>dbcp</td>
                    <td>RDBMS connection pool, using Apache DBCP</td>
                    <td>datanucleus-rdbms</td>
                </tr>
                <tr>
                    <td>org.datanucleus.store.rdbms.datasource</td>
                    <td>proxool</td>
                    <td>RDBMS connection pool, using Proxool</td>
                    <td>datanucleus-rdbms</td>
                </tr>
                <tr>
                    <td>org.datanucleus.store.rdbms.datasource</td>
                    <td>bonecp</td>
                    <td>RDBMS connection pool, using BoneCP</td>
                    <td>datanucleus-rdbms</td>
                </tr>
            </table>
            <p>
                The following sections describe how to create your own connection pooling plugin for DataNucleus.
            </p>

            <subsection name="Interface">
                <p>
                    If you have your own DataSource connection pooling implementation you can easily use it with 
                    DataNucleus.
                    <a href="http://www.datanucleus.org/javadocs/store.rdbms/3.1/org/datanucleus/store/rdbms/datasource/DataNucleusDataSourceFactory.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    DataNucleus defines a DataSourceFactory interface and you need to implement this.
                </p>
                <source>
package org.datanucleus.store.rdbms.datasource;

public interface DataNucleusDataSourceFactory
{
    /**
     * Method to make a DataSource for use within DataNucleus.
     * @param storeMgr StoreManager
     * @return The DataSource
     * @throws Exception Thrown if an error occurs during creation
     */
    public DataSource makePooledDataSource(StoreManager storeMgr);
}</source>
                <br/>
            </subsection>

            <subsection name="Implementation">
                <p>
                    So let's suppose you have a library (<i>org.mydomain.MyPoolingClass</i>) that creates a DataSource 
                    that handles pooling. So you would do something like this
                </p>
                <source>
package mydomain;

import org.datanucleus.ClassLoaderResolver;
import org.datanucleus.store.rdbms.datasource.DataNucleusDataSourceFactory;

public class MyPoolingClassDataSourceFactory implements DataNucleusDataSourceFactory
{
    /**
     * Method to make a DataSource for use within DataNucleus.
     * @param storeMgr StoreManager
     * @return The DataSource
     * @throws Exception Thrown if an error occurs during creation
     */
    public DataSource makePooledDataSource(StoreManager storeMgr)
    {
        PersistenceConfiguration conf = storeMgr.getNucleusContext().getPersistenceConfiguration();
        String dbDriver = conf.getStringProperty("datanucleus.ConnectionDriverName");
        String dbURL = conf.getStringProperty("datanucleus.ConnectionURL");
        String dbUser = conf.getStringProperty("datanucleus.ConnectionUserName");
        String dbPassword = conf.getStringProperty("datanucleus.ConnectionPassword");
        ClassLoaderResolver clr = storeMgr.getNucleusContext().getClassLoaderResolver(null);

        // Load the database driver
        try
        {
            Class.forName(dbDriver);
        }
        catch (ClassNotFoundException cnfe)
        {
            try
            {
                clr.classForName(dbDriver);
            }
            catch (RuntimeException e)
            {
                // JDBC driver not found
                throw new DatastoreDriverNotFoundException(dbDriver);
            }
        }

        // Check the presence of "mydomain.MyPoolingClass"
        try
        {
            Class.forName("mydomain.MyPoolingClass");
        }
        catch (ClassNotFoundException cnfe)
        {
            try
            {
                clr.classForName("mydomain.MyPoolingClass");
            }
            catch (RuntimeException e)
            {
                // "MyPoolingClass" library not found
                throw new DatastoreLibraryNotFoundException("MyPoolingClass", "MyPoolingClass");
            }
        }

        // Create the Data Source for your pooling library
        // Use the input driver, URL, user/password
        // Use the input configuration file as required
        DataSource ds = new mydomain.MyPoolingClass(...);

        return ds;
    }
}</source>
                <br/>
            </subsection>

            <subsection name="Plugin Specification">
                <p>
                    The only thing required now is to register this plugin with DataNucleus when you start up your application.
                    To do this create a file <i>plugin.xml</i> and put it in your JAR at the root of the CLASSPATH. 
                    It should look like this
                </p>
                <source><![CDATA[
<?xml version="1.0"?>
<plugin id="mydomain" name="DataNucleus plug-ins" provider-name="My Company">
    <extension point="org.datanucleus.store.rdbms.datasource">
        <datasource-factory name="MyPoolingClass" class-name="mydomain.MyPoolingClassDataSourceFactory"/>
    </extension>
</plugin>]]></source>
                <p>
                    Note that you also require a MANIFEST.MF file as per the
                    <a href="index.html">PluginPoints Guide</a>.
                </p>
            </subsection>

            <subsection name="Plugin Usage">
                <p>
                    The only thing remaining is to use your new <i>DataNucleusDataSourceFactory</i> plugin. You do 
                    this by having your plugin in the CLASSPATH at runtime, and setting the persistence property 
                    <b>datanucleus.connectionPoolingType</b> to <i>MyPoolingClass</i>
                    (the name you specified in the plugin.xml file).
                </p>
            </subsection>
        </section>

    </body>
</document>