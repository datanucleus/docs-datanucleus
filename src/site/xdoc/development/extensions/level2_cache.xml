<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Plugins : Level 2 Cache</title>
    </properties>

    <body>
        <section name="Plugins : Level 2 Cache">
            <img src="../images/nucleus_plugin.gif" border="0" alt=""/>
            <p>
                DataNucleus is developed as a plugin-driven framework and one of the components that is 
                pluggable is the Level 2 caching of objects (between PersistenceManagers for the same 
                PersistenceManagerFactory). The Cache guide (<a href="../jdo/cache.html">JDO</a> or 
                <a href="../jpa/cache.html">JPA</a>) defines a large selection of Level 2 caches (builtin, 
                Coherence, EHCache, OSCache, SwarmCache) but is structured so that you can easily add your 
                own variant and have it usable within your DataNucleus usage. 
            </p>
            <p>
                DataNucleus is able to support third party Level 2 Cache products. There are provided plugins
                for EHCache, SwarmCache, OSCache, and Oracle Coherence. You can extend DataNucleus's 
                capabilities using the plugin extension <i>org.datanucleus.cache_level2</i>.
            </p>
            <table>
                <tr>
                    <th>Plugin extension-point</th>
                    <th>Key</th>
                    <th>Description</th>
                    <th width="80">Location</th>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>default</td>
                    <td>Level 2 Cache (default)</td>
                    <td>datanucleus-core</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>soft</td>
                    <td>Level 2 Cache using Soft maps</td>
                    <td>datanucleus-core</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>ehcache</td>
                    <td>Level 2 Cache using EHCache</td>
                    <td>datanucleus-cache</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>ehcacheclassbased</td>
                    <td>Level 2 Cache using EHCache (based on classes)</td>
                    <td>datanucleus-cache</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>jcache</td>
                    <td>Level 2 Cache using JCache (early javax.cache)</td>
                    <td>datanucleus-cache</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>javax.cache</td>
                    <td>Level 2 Cache using javax.cache</td>
                    <td>datanucleus-core</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>cacheonix</td>
                    <td>Level 2 Cache using Cacheonix</td>
                    <td>datanucleus-cache</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>xmemcached</td>
                    <td>Level 2 Cache using Xmemcached</td>
                    <td>datanucleus-cache</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>spymemcached</td>
                    <td>Level 2 Cache using Spymemcached</td>
                    <td>datanucleus-cache</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>coherence</td>
                    <td>Level 2 Cache using Oracle Coherence</td>
                    <td>datanucleus-cache</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>oscache</td>
                    <td>Level 2 Cache using OSCache</td>
                    <td>datanucleus-cache</td>
                </tr>
                <tr>
                    <td>org.datanucleus.cache_level2</td>
                    <td>swarmcache</td>
                    <td>Level 2 Cache using SwarmCache</td>
                    <td>datanucleus-cache</td>
                </tr>
            </table>
            <p>
                The following sections describe how to create your own Level 2 cache plugin for DataNucleus.
            </p>
            <subsection name="Interface">
                <p>
                    If you have your own Level2 cache you can easily use it with DataNucleus.
                    DataNucleus defines a Level2Cache interface and you need to implement this.
                    <a href="http://www.datanucleus.org/javadocs/core/latest/org/datanucleus/cache/Level2Cache.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                </p>
                <source>
package org.datanucleus.cache;
public interface Level2Cache
{
    void close();

    void evict (Object oid);
    void evictAll ();
    void evictAll (Object[] oids);
    void evictAll (Collection oids);
    void evictAll (Class pcClass, boolean subclasses);

    void pin (Object oid);
    void pinAll (Collection oids);
    void pinAll (Object[] oids);
    void pinAll (Class pcClass, boolean subclasses);

    void unpin(Object oid);
    void unpinAll(Collection oids);
    void unpinAll(Object[] oids);
    void unpinAll(Class pcClass, boolean subclasses);

    int getNumberOfPinnedObjects();
    int getNumberOfUnpinnedObjects();
    int getSize();
    CachedPC get(Object oid);
    CachedPC put(Object oid, CachedPC pc);
    boolean isEmpty();
    void clear();
    boolean containsOid(Object oid);
}</source>
                <br/>
            </subsection>

            <subsection name="Implementation">
                <p>
                    Let's suppose your want to implement your own Level 2 cache <i>MyLevel2Cache</i>
                </p>
                <source><![CDATA[
package mydomain;

import org.datanucleus.OMFContext;
import org.datanucleus.cache.Level2Cache;

public class MyLevel2Cache implements Level2Cache
{
    /**
     * Constructor.
     * @param omfCtx OMF Context
     */
    public MyLevel2Cache(OMFContext omfCtx)
    {
        ...
    }

    ... (implement the interface)
}]]></source>
            </subsection>

            <subsection name="Plugin Specification">
                <p>
                    Once you have this implementation you then need to make the class available as a 
                    DataNucleus plugin. You do this by putting a file <i>plugin.xml</i> in your JAR at the 
                    root of the CLASSPATH. The file <i>plugin.xml</i> will look like this
                </p>
                <source><![CDATA[
<?xml version="1.0"?>
<plugin id="mydomain" name="DataNucleus plug-ins" provider-name="My Company">
    <extension point="org.datanucleus.cache_level2">
        <cache name="MyCache" class-name="mydomain.MyLevel2Cache"/>
    </extension>
</plugin>]]></source>
                <p>
                    Note that you also require a MANIFEST.MF file as per the <a href="plugins.html">Plugins Guide</a>.
                </p>
            </subsection>

            <subsection name="Plugin Usage">
                <p>
                    The only thing remaining is to use your L2 Cache plugin. To do this you specify the 
                    persistence property <i>datanucleus.cache.level2.type</i> as <b>MyCache</b> 
                    (the "name" in <i>plugin.xml</i>).
                </p>
            </subsection>
        </section>
    </body>
</document>