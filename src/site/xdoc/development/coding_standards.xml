<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Coding Standards</title>
    </properties>

    <body>
        <section name="Coding Standards">
            <p>
                Here we provide an overview of the coding standards employed in DataNucleus.
                <b>If you want to work on DataNucleus or contribute code to DataNucleus you are expected to use these 
                coding standards. We know everyone has their own preference but these are ours so you 
                follow them or any contributed code will not be directly included as is</b>
                They may differ from SUNs coding conventions but then those are the conventions of some 
                US company and that doesn't mean that they are necessarily "the best", "the official" or 
                any such title. These are ours, so best get used to it ;-).
            </p>

            <ul>
                <li><b>Indentation</b> : 4 characters indent</li>
                <li><b>Tabs</b> : no tabs please!</li>
                <li><b>Braces</b> : insert a new line before opening brace and a new line before closing
                    brace. Opening and closing braces should line up vertically.</li>
                <li><b>Line Length</b> : max line length 140</li>
                <li><b>Imports</b> : fully specify imports. Do NOT use * notation!</li>
                <li><b>Java Language Level</b> : write for JDK1.5 as a minimum. Otherwise make sure
                    that code is wrapped with "JavaUtils" restrictors (e.g 1.6).</li>
                <li><b>Fields positioning</b> : place fields at the top of a class</li>
                <li><b>Logging</b> : use <i>org.datanucleus.util.NucleusLogger</i> which wraps Log4j, JDK1.4 etc.
                    Log as much info as is considered necessary at the appropriate level.
                    See <a href="../plugins/core.html#logging">Logging Guide</a> for details</li>
                <li><b>Localisation</b> : all output exception and log messages should be localised.
                    Use <i>org.datanucleus.util.Localiser</i>. 
                    See <a href="../plugins/core.html#internationalisation">Localisation Guide</a> for details</li>
            </ul>
            <p>
                If you are using Eclipse then we have an 
                <a href="code-conventions-eclipse.xml">XML Configuration</a> to specify in Eclipse.
                <br/>
            </p>

            <subsection name="Examples">
                <source>
/**
 * A sample source file for the code formatter preview
 */
package mypackage;

import java.util.LinkedList;

public class MyIntStack
{
    private final LinkedList fStack;

    public MyIntStack()
    {
        fStack = new LinkedList();
    }

    public int pop()
    {
        return ((Integer) fStack.removeFirst()).intValue();
    }

    public void push(int elem)
    {
        fStack.addFirst(new Integer(elem));
    }

    public boolean isEmpty()
    {
        return fStack.isEmpty();
    }
}</source>
                <source>
/**
 * Indentation
 */
class Example
{
    int[] myArray = {1, 2, 3, 4, 5, 6};
    int theInt = 1;
    String someString = "Hello";
    double aDouble = 3.0;

    void foo(int a, int b, int c, int d, int e, int f)
    {
        switch (a)
        {
            case 0 :
                Other.doFoo();
                break;
            default :
                Other.doBaz();
        }
    }

    void bar(List v)
    {
        for (int i = 0; i &lt; 10; i++)
        {
            v.add(new Integer(i));
        }
    }
}</source>
                <source>
/**
 * If...else
 */
class Example
{
    void bar()
    {
        do
        {
        }
        while (true);
        try
        {
        }
        catch (Exception e)
        {
        }
    }

    void foo2()
    {
        if (true)
        {
            return;
        }
        if (true)
        {
            return;
        }
        else if (false)
        {
            return;
        }
        else
        {
            return;
        }
    }

    void foo(int state)
    {
        if (true)
        {
            return;
        }
        if (true)
        {
            return;
        }
        else if (false)
        {
            return;
        }
        else
        {
            return;
        }
    }
}                
                </source>
            </subsection>

        </section>

        <section name="References">
            <p>
                In this document we describe just a small set of guidelines. Some references are really 
                worth a read, though our particular guidelines above override some of the things here.
            </p>
            <ul>
                <li><a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html" target="_blank">Java Code Conventions (High importance)</a></li>
                <li><a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html" target="_blank">How to Write Doc 
                    Comments for the JavadocTM Tool</a> (High importance)</li>
                <li><a href="http://mindprod.com/jgloss/unmain.html" target="_blank">How To Write Unmaintainable Code (What not to do)</a></li>
                <li><a href="http://www.ambysoft.com/essays/codingGuidelines.html" target="_blank">Scott Ambler Programming Guidelines 
                    (Follow something)</a></li>
            </ul>
        </section>
    </body>
</document>