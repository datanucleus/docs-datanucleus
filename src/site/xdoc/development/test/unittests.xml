<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Unit Tests</title>
    </properties>

    <body>
        <section name="DataNucleus : Component Tests">
            <p>
                DataNucleus uses JUnit (3.x) for unit testing. The traditional style of "unit" test are included with 
                the project that they are testing. For example "core" has some "unit" tests, and these are run
                when you build the project.
            </p>
            <br/>
        </section>

        <section name="DataNucleus : End-to-End Tests">
            <p>
                <b>End-to-End tests</b> also use JUnit, and are available under the <i>tests/accessplatform/trunk</i>
                part of Subversion. In these tests we persist objects in a datastore, and test the result.
                There are several scenarios for this type of test, because JDO/JPA have many aspects. 
                By this we mean that we separate our tests into what they test. When developing anything, the tests 
                should be the guiding light as to whether you should be checking anything in to SVN. If your change 
                breaks things, you shouldn't check things in. Each test "scenario" has its own project in SVN with 
                names like "test.jdo.general", "test.jpa.general", etc.
            </p>

            <subsection name="test.maven2.parent">
                <p>
                    The first thing you require is to obtain and build this project. It is the top level
                    for all "test" projects.
                </p>
                <source>mvn clean install</source>
                <p>This builds the jar under "target" and installs it into your Maven2 repository.</p>
                <br/>
            </subsection>

            <subsection name="test.framework">
                <p>
                    The first thing you require is to build this project. It provides a framework for all test scenarios
                    and is available in SVN under <i>test/accessplatform/trunk/test.framework</i>.
                    To build the "test.framework" using Maven, you simply type (from the test.framework project)
                </p>
                <source>mvn clean install</source>
                <p>This builds the jar under "target" and installs it into your Maven2 repository.</p>
                <br/>
            </subsection>

            <subsection name="test.samples">
                <p>
                    The next thing you require is to build this project. It provides sample model classes for use 
                    in the majority of test scenarios and is available in SVN under 
                    <i>test/accessplatform/trunk/test.samples</i>). These are the classes to be persisted, 
                    but do not include the information about how they will be persisted (that is specified in 
                    the individual test suite).
                    To build the "test.samples" using Maven, you simply type (from the test.samples project)
                </p>
                <source>mvn clean install</source>
                <p>This builds the jar under "target" and installs it into your Maven2 repository.</p>
                <br/>
            </subsection>

            <subsection name="End-to-End Test Scenarios">
                <p>
                    So we have now built the <i>test.framework</i> and <i>test.samples</i> projects and
                    are ready to run any of the "scenarios". There are many scenarios including
                </p>
                <ul>
                    <li>Tests for JDO API
                        <ul>
                        <li><b>test.jdo.general</b> - General tests for JDO</li>
                        <li><b>test.jdo.identity</b> - Tests for JDO that run with both application and datastore identity types</li>
                        <li><b>test.jdo.jta</b> - Tests for using JTA transactions with JDO</li>
                        <li><b>test.jdo.spatial</b> - Tests for use spatial types with JDO</li>
                        <li><b>test.jdo.rdbms</b> - Tests specific to RDBMS, using JDO</li>
                        <li><b>test.jdo.ldap</b> - Tests specific to LDAP, using JDO</li>
                        <li><b>test.jdo.excel</b> - Tests specific to Excel, using JDO</li>
                        <li><b>test.jdo.hbase</b> - Tests for basic handling with HBase, using JDO</li>
                        <li><b>test.jdo.mongodb</b> - Tests for basic handling with MongoDB, using JDO</li>
                        </ul>
                    </li>
                    <li>Tests for JPA API
                        <ul>
                        <li><b>test.jpa.general</b> - General tests for JPA</li>
                        <li><b>test.jpa.jta</b> - Tests for using JTA transaction with JPA</li>
                        <li><b>test.jpa.spatial</b> - Tests for using spatial types with JPA</li>
                        <li><b>test.jpa.rdbms</b> - Tests specific to RDBMS, using JPA</li>
                        </ul>
                    </li>
                    <li>Tests for REST API
                        <ul>
                        <li><b>test.rest</b> - Tests using the REST API</li>
                        </ul>
                    </li>
                </ul>
                <p>
                    To run a test scenario, go into the scenario project and type
                </p>
                <source>mvn clean test</source>
                <p>
                    This then runs the tests for that scenario. There are also occasionally additional tests
                    under <i>org.datanucleus.tests.knownbugs</i> and <i>org.datanucleus.tests.newfeatures</i>
                    intended for incorporation into the test scenario at some later point; these are not run by
                    default.
                </p>
                <p><b>To run the tests on a different datastore (default=H2)</b> type</p>
                <source>mvn clean test -Pmysql</source>
                <p>or replace "mysql" with "postgresql", "oracle", "mongodb", "hbase" etc</p>
                <p>
                    Long term strategy is to just have the overall test scenarios that apply just to JDO or JPA
                    and drop the datastore-specific scenarios except where providing some feature specific to that
                    datastore. Reality is that we don't have resource to do this yet, so typically run such as
                    <i>test.jdo.mongodb</i> for testing MongoDB, which obviously only tests a small subset of what
                    ought to be tested. <b>Offering your time to make all store plugins more feature complete
                    is the only way this task will be performed.</b>
                </p>
                <br/>
            </subsection>

            <subsection name="JCA Test Scenarios">
                <p>
                    The DataNucleus JCA connector test scenarios are the following projects. 
                    To run these tests you must create the data source, deploy the DataNucleus JCA connector 
                    and deploy the EJB application.
                </p>
                <ul>
                    <li><b>test.jca.jdo</b> - EJB application with tests for JDO</li>
                </ul>
                <br/>
            </subsection>

            <a name="new_unit_test"/>
            <subsection name="Adding Unit Tests">
                <p>
                    Where you feel that our unit tests do not adequately cover functionality, 
                    you should add a test. Please follow the following process
                </p>
                <ol>
                    <li>Decide which scenario your test fits into (e.g test.jdo.general, test.jpa.general)</li>
                    <li>Look at the available model samples (test.samples) and choose one.</li>
                    <li>Write your unit test, extending one of the common base classes, 
                        for example <b>JDOPersistenceTestCase</b>, or <b>JPAPersistenceTestCase</b></li>
                    <li>Run your test.</li>
                    <li>Raise a JIRA and attach your testcase to the issue</li>
                </ol>
            </subsection>

            <a name="test_configs"/>
            <subsection name="Alternate Test Configurations">
                <p>
                    All tests run with a default test configuration (see the files in <i>test.framework</i> under <i>src/conf</i>).
                    You can, with some test suites, run alternate test configurations. This is achieved using the
                    <b>test.framework.maven</b> Maven plugin.
                </p>
                <ol>
                    <li>Look for a configuration file under <i>src/conf</i> of test.framework such as <i>optimistic-conf.properties</i>.
                        These properties are used to override the default properties</li>
                    <li>Run the tests with <i>-Dtest.configs=optimistic</i> or <i>-Dtest.configs=optimistic,pessimistic</i> for example</li>
                </ol>
            </subsection>
        </section>

        <section name="Databases Notes">
        	<a name="database_notes"/>
            <subsection name="Database setup for running tests">
                <p>
                    Each test project is run against a datastore (as defined above). The configuration of
                    the datastores is stored under test.framework/src/conf. Some tests require two database instances, 
                    which is why for every database there exist two files, e.g. "maven.datanucleus.datastore=hsql" refers
                    to both
                </p>
                <ul>
                    <li>test.framework/src/conf/datanucleus-hsql.<b>1</b>.properties, and</li>
                    <li>test.framework/src/conf/datanucleus-hsql.<b>2</b>.properties</li>
                </ul>
                <p>
                	The default database configured in the test projects is H2. 
                </p>
                <br/>
            </subsection>

            <p>
                Following are notes about running the DataNucleus unit tests with particular databases.
            </p>
            <subsection name="Oracle 10.2.0.1">
                <p>
                    If you face the issue <i>ORA-12519, TNS:no appropriate service handler</i>, try increasing 
                    the parameters <i>sessions</i> and <i>processes</i> to 300 and <i>open_cursors</i> to 1000. 
                    To change these values in Oracle, issue the following statements.
<source>
alter system set open_cursors = 1000 scope=spfile
alter system set sessions = 300 scope=spfile
alter system set processes = 300 scope=spfile
</source>
Refer also to the Oracle spfile (see also <i>initXE.ora</i> or <i>init.ora</i>)
<source>
*.processes=300
*.sessions=300
*.open_cursors=1000
</source>                    
                </p>
                <p>                
                    If you face the issue <i>ORA-01000: maximum open cursors exceeded</i>, try increasing the parameter
                    <i>open_cursors</i> to 1000 in the file <i>initXE.ora</i> or <i>init.ora</i>.
<source>
*.open_cursors=1000
</source>                    
                </p>
                <p>
                    If you face OutOfMemory errors, increase the <i>Xms</i> and <i>Xmx</i> JVM args for running 
                    the junit tests.
                </p>                
            </subsection>            
        </section>

    </body>
</document>
