<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>org.datanucleus.enhancer</title>
    </properties>

    <body>
        <section name="DataNucleus Enhancer">
            <p>
                <i>datanucleus-enhancer</i> provides bytecode enhancement of classes that will be involved in the 
                persistence process. It adds in the necessary methods required to intercept changes in the objects 
                hence providing the speed benefits of DataNucleus.
                <b>It is merged into the <i>datanucleus-core</i> plugin as of version 3.2.0.m1 and, as such,
                is now inactive</b>.
            </p>
            <ul>
                <li>Compile Requirement : JDK1.5+</li>
                <li>Runtime Requirement : JDK1.5+</li>
                <li>Latest version : 3.1.1</li>
                <li>Roadmap : <a href="http://issues.datanucleus.org/browse/NUCENHANCER?report=com.atlassian.jira.plugin.system.project:roadmap-panel" target="_blank">Via JIRA</a></li>
                <li>License : <a href="../../project/license.html">Apache 2</a></li>
                <li>Javadocs : <a href="../../javadocs/enhancer/3.1">3.1</a>,
                               <a href="../../javadocs/enhancer/3.0">3.0</a>,
                               <a href="../../javadocs/enhancer/2.1">2.1</a>,
                               <a href="../../javadocs/enhancer/2.0">2.0</a>,
                               <a href="../../javadocs/enhancer/1.1">1.1</a>,
                               <a href="../../javadocs/enhancer/1.0">1.0</a></li>
                <li>Source : <a href="http://datanucleus.svn.sourceforge.net/viewvc/datanucleus/platform/enhancer/trunk/">latest</a></li>
            </ul>

            <subsection name="Source Code">
                <p>trunk can be checked out as follows</p>
<source>svn co https://datanucleus.svn.sourceforge.net/svnroot/datanucleus/platform/enhancer/trunk enhancer</source>
                <br/>
            </subsection>

            <subsection name="Download">
                <p><i>datanucleus-enhancer</i> is downloadable as following</p>
                <ul>
                    <li><b>Releases</b> <a href="http://www.datanucleus.org/downloads/maven2/org/datanucleus/datanucleus-enhancer/" target="_blank">from Maven2 Repository</a></li>
                    <li><b>Nightly builds</b> <a href="http://www.datanucleus.org/downloads/maven2-nightly/org/datanucleus/datanucleus-enhancer/" target="_blank">from Maven2 Nightly Repository</a></li>
                </ul>
                <br/>
            </subsection>

            <subsection name="Dependencies">
                <p>
                    <i>datanucleus-enhancer</i> is dependent on the following packages of software. 
                    Click on the name to go to the home page for that software to download it.
                </p>
                <table>
                    <tr>
                        <th>Package</th>
                        <th>Version</th>
                        <th>Description</th>
                        <th width="150">Required?</th>
                    </tr>
                    <tr>
                        <td><a href="../core/index.html">datanucleus-core</a></td>
                        <td>3.0+</td>
                        <td>Provides logging, localisation, and other framework facilities for DataNucleus.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td><a href="../api.jdo.html">datanucleus-api-jdo</a></td>
                        <td>3.0+</td>
                        <td>DataNucleus JDO API support</td>
                        <td>If enhancing for JDO</td>
                    </tr>
                    <tr>
                        <td><a href="../api.jpa.html">datanucleus-api-jpa</a></td>
                        <td>3.0+</td>
                        <td>DataNucleus JPA API support</td>
                        <td>If enhancing for JPA</td>
                    </tr>
                    <tr>
                        <td><a href="http://www.ibiblio.org/maven/javax.jdo/jars/" target="_blank">JDO</a></td>
                        <td>3.0+</td>
                        <td>Apache JDO API.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td><a href="http://asm.objectweb.org/" target="_blank">ASM</a></td>
                        <td>4.0+</td>
                        <td>ASM byte code manipulation framework. 
                            This is used to byte code enhance the classes.
                            v3.0 of the enhancer requires v3.x of ASM.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td><a href="http://jakarta.apache.org/log4j/" target="_blank">log4j</a></td>
                        <td>1.2.x+</td>
                        <td>Apache Log4J Logging framework.</td>
                        <td>No. Use it or JDK1.4 logging</td>
                    </tr>
                </table>
                <br/>
                <br/>
            </subsection>
        </section>

        <section name="Enhancer">
            <p>
                DataNucleus relies on classes implementing <i>PersistenceCapable</i>, and <i>Detachable</i>. 
                Users could clearly do this manually but we provide the byte-code enhancement option. The 
                DataNucleus Enhancer is structured to firstly determine from the input which classes are 
                required to be enhanced, and secondly to enhance each class using the selected 
                <b>ClassEnhancer</b>. DataNucleus has the <i>ASMClassEnhancer</i> (using ASM!).
            </p>

            <subsection name="ASMClassEnhancer">
                <p>
                    ASM operates in a very similar way to BCEL, however is much more lightweight and operates
                    using the same pattern as a SAX Parser and much faster. It uses a Visitor pattern. 
                    First the class is visited, then fields and methods, and finally an "end" point where you 
                    can add on any new fields/methods etc. The <i>ASMClassEnhancer</i> uses the 
                    <i>JdoClassVisitor</i> to obtain information about a class to be enhanced and adds on all 
                    required fields/methods.
                </p>
                <p>
                    A very useful utility when developing with ASM is its "Bytecode Outline" Eclipse plugin.
                    To install it simply add an "Eclipse Update site" to your Eclipse config
                    as "http://download.forge.objectweb.org/eclipse-update/" and the name "ObjectWeb".
                    You then install the "Bytecode Outline" plugin. Once you have it installed select
                    "Window" -> "Show View" -> "Other" -> "Java : Bytecode". This provides a window showing the 
                    Java bytecode for the class being edited. If you click on the "ASM" button on this window it 
                    shows you the ASM commands you would need to create the class, or a particular method/field!.
                    This makes developing new <i>ASMClassMethod</i> implementations a doddle - just create a 
                    class with the method you want generating and then cut and paste the ASM code in.
                </p>
                <ul>
                    <li><a href="http://asm.objectweb.org/index.html" target="_blank">ASM Home Page</a></li>
                    <li><a href="http://asm.objectweb.org/current/doc/javadoc/user/index.html" target="_blank">ASM 3.0 Javadocs</a></li>
                    <li><a href="http://www.onjava.com/pub/a/onjava/2004/10/06/asm1.html" target="_blank">OnJava : ASM</a></li>
                    <li><a href="http://www-128.ibm.com/developerworks/java/library/j-cwt05125/index.html" target="_blank">IBM Alphaworks : ASM</a></li>
                </ul>
            </subsection>

            <subsection name="Decompiling Classes">
                <p>
                    If you ever need to check the byte-code enhanced class for correctness you can always 
                    decompile it back to the Java file. This can be done with a bytecode decompiler such as
                    <a href="http://java.decompiler.free.fr/">JD</a>. 
                    Unpack the JD-GUI download so that you have the following
                </p>
                <ul>
                    <li>jd-gui</li>
                    <li>readme.txt</li>
                </ul>
                <p>
                    and invoke the following command
                </p>
                <source>jd-gui</source>
                <p>
                    and select "Open", choosing a class file, and it shows the java code
                </p>
            </subsection>
        </section>

    </body>
</document>