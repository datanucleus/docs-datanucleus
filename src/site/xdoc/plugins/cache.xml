<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>org.datanucleus.cache</title>
    </properties>

    <body>
        <section name="DataNucleus Cache">
            <p>
                <i>datanucleus-cache</i> provides Level2 caching capabilities. It supports use of 
                <a href="http://www.sf.net/projects/ehcache" target="_blank">EHCache</a>,
                <a href="http://www.tangosol.com" target="_blank">Oracle Coherence</a>,
                <a href="http://www.opensymphony.com/oscache/" target="_blank">OSCache</a>,
                <a href="http://swarmcache.sourceforge.net/" target="_blank">SwarmCache</a>, 
                <a href="http://sourceforge.net/projects/jsr107cache/" target="_blank">JCache</a>,
                <a href="http://code.google.com/p/spymemcached/" target="_blank">Spymemcached</a>,
                <a href="http://code.google.com/p/xmemcached/" target="_blank">Xmemcached</a>, and
                <a href="http://www.cacheonix.com/" target="_blank">Cacheonix</a>.
            </p>
            <ul>
                <li>Compile Requirement : JDK1.5+</li>
                <li>Runtime Requirement : JDK1.5+</li>
                <li>Latest version : 3.1.2</li>
                <li>Roadmap : <a href="http://issues.datanucleus.org/browse/NUCCACHE?report=com.atlassian.jira.plugin.system.project:roadmap-panel" target="_blank">Via JIRA</a></li>
                <li>License : <a href="../../project/license.html">Apache 2</a></li>
                <li>Javadocs : <a href="../../javadocs/cache/3.1">3.1</a>,
                               <a href="../../javadocs/cache/3.0">3.0</a>,
                               <a href="../../javadocs/cache/2.1">2.1</a>,
                               <a href="../../javadocs/cache/2.0">2.0</a>,
                               <a href="../../javadocs/cache/1.1">1.1</a>,
                               <a href="../../javadocs/cache/1.0">1.0</a></li>
                <li>Source : <a href="https://sourceforge.net/p/datanucleus/code/HEAD/tree/platform/cache/trunk/">latest</a></li>
            </ul>

            <subsection name="Source Code">
                <p>trunk can be checked out as follows</p>
<source>svn co https://svn.code.sf.net/p/datanucleus/code/platform/cache/trunk cache</source>
                <br/>
            </subsection>

            <subsection name="Download">
                <p><i>datanucleus-cache</i> is downloadable as following</p>
                <ul>
                    <li><b>Releases</b> <a href="http://repo1.maven.org/maven2/org/datanucleus/datanucleus-cache/" target="_blank">from Maven Central</a></li>
                    <li><b>Nightly builds</b> <a href="http://www.datanucleus.org/downloads/maven2-nightly/org/datanucleus/datanucleus-cache/" target="_blank">from Maven2 Nightly Repository</a></li>
                </ul>
                <br/>
            </subsection>

            <subsection name="Dependencies">
                <p>
                    <i>datanucleus-cache</i> is dependent on the following packages of software. 
                    Click on the name to go to the home page for that software to download it.
                </p>
                <table>
                    <tr>
                        <th>Package</th>
                        <th>Version</th>
                        <th>Description</th>
                        <th width="150">Required?</th>
                    </tr>
                    <tr>
                        <td><a href="../core/index.html">datanucleus-core</a></td>
                        <td>3.0+</td>
                        <td>Provides logging, localisation, and other framework facilities for DataNucleus.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td><a href="http://www.ibiblio.org/maven/ehcache/jars/" target="_blank">ehcache</a></td>
                        <td>1.1+</td>
                        <td>EHCache caching</td>
                        <td>Yes if using EHCache</td>
                    </tr>
                    <tr>
                        <td><a href="http://www.tangosol.com" target="_blank">Oracle Coherence</a></td>
                        <td></td>
                        <td>Oracle Coherence caching</td>
                        <td>Yes, if using Coherence</td>
                    </tr>
                    <tr>
                        <td><a href="http://www.ibiblio.org/maven/opensymphony/oscache/jars/" target="_blank">oscache</a></td>
                        <td>2.1</td>
                        <td>OSCache caching</td>
                        <td>Yes, is using OSCache</td>
                    </tr>
                    <tr>
                        <td><a href="http://www.ibiblio.org/maven/swarmcache/jars/" target="_blank">swarmcache</a></td>
                        <td>1.0RC2</td>
                        <td>SwarmCache caching</td>
                        <td>Yes, if using SwarmCache</td>
                    </tr>
                    <tr>
                        <td>net.sf.jsr107cache</td>
                        <td>1.1</td>
                        <td>JCache caching</td>
                        <td>Yes, if using JCache</td>
                    </tr>
                    <tr>
                        <td><a href="http://code.google.com/p/spymemcached/" target="_blank">spymemcached</a></td>
                        <td>2.3+</td>
                        <td>Spymemcached caching</td>
                        <td>Yes, if using Spymemcached</td>
                    </tr>
                    <tr>
                        <td><a href="http://code.google.com/p/xmemcached/" target="_blank">xmemcached</a></td>
                        <td>1.3+</td>
                        <td>Xmemcached caching</td>
                        <td>Yes, if using Xmemcached</td>
                    </tr>
                </table>
                <br/>
                <br/>
            </subsection>
        </section>

        <section name="L2 Cache">
            <p>
                JDO and JPA allow the use of a level 2 (L2) cache, with the cache shared between
                PersistenceManagers/EntityManagers. The objects in the level 2 cache don't pertain to any
                one manager. The L2 cache in DataNucleus is as follows :-
            </p>
            <p>
                The L2 cache stores an object of type <i>org.datanucleus.cache.CachedPC</i> and is keyed
                by the identity of the object. The <i>CachedPC</i> contains a persistable object (<b>not</b>
                connected to a StateManager), together with the indicators for which fields are loaded, as
                well as values for any relation fields. The persistable object will have values as null for
                any relation fields, and it is these relation field values stored in the <i>CachedPC</i>
                that provide linkage to other objects. 
            </p>
            <p>
                The relation field values also do not store actual objects; they store the identities of the 
                related objects. For example if an object X has a 1-1 relation with another persistable 
                object Y then in the relation field values for X for that field we store the identity of
                Y. Similarly if the field is a Collection, then the relation field values will be a 
                Collection of identities of the related objects. This provides isolation of each object
                in the L2 cache (so objects aren't storing references to other objects and so allowing garbage
                collection etc).
            </p>
            <p>
                Objects are stored in the L2 cache in the following situations
            </p>
            <ul>
                <li>An object is retrieved (from the datastore) within a transaction, and it is
                    stored in the L2 cache if no object with that identity already exists there.</li>
                <li>At commit() of the transaction any object that has been modified during that
                    transaction will be stored/updated in the L2 cache if its persistable object is
                    still in memory in the PM/EM (could have been garbage collected since flushing)</li>
            </ul>
            <p>
                Each class can be configured to be <i>cacheable</i> or not. The default for a persistable
                class is to be cacheable. Configuration is performed via annotations or XML metadata.
                If a class is not cacheable then objects of that type aren't stored in the L2 cache.
            </p>
            <p>
                See also :-
            </p>
            <ul>
                <li>JDOStateManager : initialiseForCachedPC() - bringing object back from L2 cache</li>
                <li>JDOStateManager : cache() - creating an object for putting in the L2 cache</li>
                <li>datanucleus-cache plugin</li>
            </ul>
        </section>
    </body>
</document>