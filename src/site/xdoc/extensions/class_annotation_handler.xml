<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Plugins : Class Annotation Handler</title>
    </properties>

    <body>
        <section name="Plugins : Class Annotation Handler">
            <img src="../images/nucleus_plugin.gif" border="0" alt=""/>
            <p>
                DataNucleus is developed as a plugin-driven framework and one of the components that is pluggable is 
                the handling of annotations at class-level. DataNucleus provides a support for 
                <a href="../jdo/annotations.html">JDO</a> and <a href="../jpa/annotations.html">JPA</a> annotations, 
                but is structured so that you can easily add your own annotations and have them usable within your 
                DataNucleus usage. <b>This extension is for DataNucleus 3.0+</b>
            </p>
            <br/>
            <br/>

            <subsection name="Interface">
                <p>
                    Any class annotation handler plugin will need to implement 
                    <i>org.datanucleus.metadata.annotations.ClassAnnotationHandler</i>.
                    <a href="http://www.datanucleus.org/javadocs/core/latest/org/datanucleus/metadata/annotations/ClassAnnotationHandler.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    So you need to implement the following interface
                </p>
                <source>
package org.datanucleus.metadata.annotations;

import org.datanucleus.ClassLoaderResolver;
import org.datanucleus.metadata.AbstractClassMetaData;

public interface ClassAnnotationHandler
{
    /**
     * Method to process a class level annotation.
     * @param annotation The annotation
     * @param cmd Metadata for the class to update with any necessary information.
     * @param clr ClassLoader resolver
     */
    void processClassAnnotation(AnnotationObject annotation, AbstractClassMetaData cmd, ClassLoaderResolver clr);
}</source>
                <br/>
            </subsection>

            <subsection name="Plugin Specification">
                <p>
                    So we now have our custom "annotation handler" and we just need to make this into a DataNucleus 
                    plugin. To do this you simply add a file <i>plugin.xml</i> to your JAR at the root. The file
                    <i>plugin.xml</i> should look like this
                </p>
                <source><![CDATA[
<?xml version="1.0"?>
<plugin id="mydomain.annotations" name="DataNucleus plug-ins" provider-name="My Company">
    <extension point="org.datanucleus.class_annotation_handler">
        <class-annotation-handler annotation-class="mydomain.annotations.MyAnnotation" 
                handler="mydomain.annotations.MyAnnotationHandler"/>
    </extension>
</plugin>]]></source>
                <p>
                    Note that you also require a MANIFEST.MF file as per the
                    <a href="plugins.html">Plugins Guide</a>.
                </p>
                <p>
                    So here, when the metadata for our class is processed, if it finds the @MyAnnotation annotation
                    it will call this handler after generating the basic metadata for the class, allowing us to update it.
                </p>
            </subsection>
        </section>
    </body>
</document>