<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>PluginPoints : Identity String Translators</title>
    </properties>

    <body>
        <section name="PluginPoints : Identity String Translators">
            <img src="../images/nucleus_plugin.gif" border="0" alt=""/>
            <p>
                DataNucleus is developed as a plugin-driven framework and one of the components that is pluggable is 
                translation of identities. When you call <i>pm.getObjectById(id)</i> you pass in an object. This object
                can be the toString() form of an identity. Some other JDO implementations (e.g Xcalia) allowed
                non-standard String input here including a discriminator. This plugin point allows for such
                non-standard String input forms to pm.getObjectById(id) and can provide a plugin that translates this 
                String into a valid JDO identity. Alternatively you could do this in your own code, but the facility 
                is provided. This means that in your application you only use your own form of identities.
            </p>
            <p>
                You can extend DataNucleus's capabilities using the plugin extension 
                <i>org.datanucleus.identity_string_translator</i>.
            </p>
            <table>
                <tr>
                    <th>Plugin extension-point</th>
                    <th>Key</th>
                    <th>Description</th>
                    <th width="80">Location</th>
                </tr>
                <tr>
                    <td>org.datanucleus.identity_string_translator</td>
                    <td>xcalia</td>
                    <td>Translator that allows for {discriminator}:key as well as the usual input, as
                        supported by Xcalia XIC</td>
                    <td>datanucleus-core</td>
                </tr>
            </table>
            <br/>

            <subsection name="Interface">
                <p>
                    Any identifier factory plugin will need to implement <i>org.datanucleus.store.IdentifierStringFactory</i>.
                    <a href="http://www.datanucleus.org/javadocs/core/latest/org/datanucleus/identity/IdentityStringTranslator.html" target="_blank"><img src="../../images/javadoc.gif" alt=""/></a>
                    So you need to implement the following interface
                </p>
                <source>
package org.datanucleus.identity;

public interface IdentityStringTranslator
{
    /**
     * Method to translate the string into the identity.
     * @param om ObjectManager
     * @param stringId String form of the identity
     * @return The identity
     */
    Object getIdentity(ObjectManager om, String stringId);
}</source>
                <br/>
            </subsection>

            <subsection name="Plugin Specification">
                <p>
                    When we have defined our "IdentityStringTranslator" we just need to make it into a DataNucleus 
                    plugin. To do this you simply add a file <i>plugin.xml</i> to your JAR at the root. The file
                    <i>plugin.xml</i> should look like this
                </p>
                <source><![CDATA[
<?xml version="1.0"?>
<plugin id="mydomain" name="DataNucleus plug-ins" provider-name="My Company">
    <extension point="org.datanucleus.identity_string_translator">
        <identitystringtranslator name="mytranslator" class-name="mydomain.MyIdStringTranslator"/>
    </extension>
</plugin>]]></source>
                <p>
                    Note that you also require a MANIFEST.MF file as per the
                    <a href="index.html">PluginPoints Guide</a>.
                </p>
            </subsection>

            <subsection name="Plugin Usage">
                <p>
                    The only thing remaining is to use your new <i>IdentityStringTranslator</i> plugin. 
                    You do this by having your plugin in the CLASSPATH at runtime, and setting the persistence property 
                    <b>datanucleus.identityStringTranslatorType</b> to <i>mytranslator</i>
                    (the name you specified in the plugin.xml file).
                </p>
            </subsection>
        </section>
    </body>
</document>